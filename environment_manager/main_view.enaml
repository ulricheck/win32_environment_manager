import os
from enaml.core.api import Conditional, Looper
from enaml.layout.api import vbox, hbox, align, spacer
from enaml.widgets.api import MainWindow, MenuBar, Menu, Action, ActionGroup
from enaml.icon import Icon, IconImage
from enaml.image import Image
from enaml.widgets.api import (
    Container, Label, Field, PushButton, ScrollArea, StatusBar, StatusItem, Html, MultilineField, PopupView, Form
)

from message_box import question


def load_icon(name):
	dirname = os.path.dirname(__file__)
	fname = os.path.join(dirname, 'images', '%s.png' % name)
	with open(fname, 'rb') as f:
		data = f.read()
	img = Image(data=data)
	icg = IconImage(image=img)
	return Icon(images=[icg])

WINDOW_ICON = load_icon('emblem-system')



enamldef ConfigurationOverview(PopupView):
    attr config

    #foreground = 'white'
    #background = 'rgba(30, 30, 30, 0.85)'
    parent_anchor = (0.5, 0.5)
    anchor = (0.5, 0.0)
    arrow_size = 5
    arrow_edge = 'top'
    offset = (0, 0)

    Form:
        padding = 20
        Conditional:
            condition = len(config.add_keys) > 0
            Label:
                text = "Add Variables"
            MultilineField:
                minimum_size = (500, 100)
                maximum_size = (500,100)
                text = u"\n".join([u"%s: %s" % (v.key, v.get_value_as_string()) for v in config.add_keys])

        Conditional:
            condition = len(config.remove_keys) > 0
            Label:
                text = "Remove Variables"
            MultilineField:
                minimum_size = (500, 100)
                maximum_size = (500,100)
                text = u"\n".join([u"%s: %s" % (v.key, v.get_value_as_string()) for v in config.remove_keys])

        Conditional:
            condition = len(config.prepend_path) > 0
            Label:
                text = "Prepend to PATH"
            MultilineField:
                minimum_size = (500, 100)
                maximum_size = (500,100)
                text = u"\n".join([v.value for v in config.prepend_path])

        Conditional:
            condition = len(config.append_path) > 0
            Label:
                text = "Append to PATH"
            MultilineField:
                minimum_size = (500, 100)
                maximum_size = (500,100)
                text = u"\n".join([v.value for v in config.append_path])


def activate_configuration(window, name):
    window.appstate.activate_configuration(name)


def confirm_close(window, event):
    def exit_handler(change):
        if change is not None and change['value'] == False:
            window.close()

    if window.appstate.active_config is None:
        event.accept()
        return

    button = question(
        window, 'Environment Manager', 'Are you sure you want to quit?'
    )
    if button and button.action == 'accept':
        immediate_exit = True
        ac = window.appstate.active_config
        if ac is not None and ac.is_active:
            immediate_exit = False
            window.appstate.observe("bgThread_running", exit_handler)

        # notify shutdown
        window.appstate.app_stopping()

        if immediate_exit:
            event.accept()
        else:
            event.ignore()
    else:
        event.ignore()


enamldef Main(MainWindow): win:
    attr appstate

    title = "Environment Manager"
    icon = WINDOW_ICON
    minimum_size = (400,200)

    closing :: confirm_close(self, change['value'])

    StatusBar:
        StatusItem:
            Label:
                text << appstate.job_status or "Idle"

    MenuBar:
        Menu:
            title = '&File'
            Action:
                enabled << appstate.bgThread_running == False
                text = 'Quit\tCtrl+Q'
                triggered :: win.close()

    Container:
        constraints = [
            vbox(
                label,
                scroller,
                # syslog,
            ),
            align('v_center', label),
        ]

        enabled << appstate.bgThread_running == False

        Label: label:
            text = 'Select Environment Configuration'

        ScrollArea: scroller:
            Container:
                Looper: looper:
                    iterable << [v.name for v in sorted(appstate.config.configurations.values(), lambda a,b: cmp(a.order, b.order))]
                    Container:
                        padding = 0
                        constraints = [
                            vbox(
                                hbox(item_activate, item_show, item_label, spacer),
                                item_description,
                            )
                        ]
                        Label: item_label:
                            text = loop_item
                        PushButton: item_activate:
                            text = 'Activate'
                            enabled << appstate.config.configurations[loop_item].is_active==False
                            clicked :: activate_configuration(win, loop_item)
                        PushButton: item_show:
                            text = 'Show'
                            clicked :: ConfigurationOverview(self, config=appstate.config.configurations[loop_item].get_config()).show()
                        Html: item_description:
                            constraints = [height == 100]
                            source << '<b>%s</b><ul>%s</ul>' % (appstate.config.configurations[loop_item].description, "".join(["<li>%s</li>" % s.name for s in appstate.config.configurations[loop_item].sections]))

        # MultilineField: syslog:
        #     read_only = True
        #     text << "\n".join(appstate.syslog.logitems)

